buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

apply plugin: 'org.spongepowered.mixin'

group = "${project.maven_group}"
version = "${project.forge_mod_version}"

java {
    archivesBaseName = "${project.archives_base_name}"
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft {

    mappings channel: mapping_channel, version: minecraft_version

    copyIdeResources = true

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            taskName 'Client'
            workingDirectory project.file('run_client')
            property 'forge.enabledGameTestNamespaces', mod_id
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        server {
            taskName 'Server'
            workingDirectory project.file('run_server')
            property 'forge.enabledGameTestNamespaces', mod_id
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--nogui'
        }

        //data {
        //    workingDirectory project.file('run-data')
        //    args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        //}

    }

}

mixin {
    add sourceSets.main, "better_snowball.refmap.json"

    config "better_snowball.mixins.json"
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fileTree('libs') { include '*.jar' }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

// Example for how to get properties into the manifest for reading at runtime.


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.maven_group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (System.getenv("MAVEN_URL")) {
            maven {
                name = 'mavenLocal2'
                url System.getenv("MAVEN_URL")
                // Add repositories to publish to here.
                // Notice: This block does NOT have the same function as the block in the top level.
                // The repositories here will be used for publishing your artifact, not for
                // retrieving dependencies.
            }
        }
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
